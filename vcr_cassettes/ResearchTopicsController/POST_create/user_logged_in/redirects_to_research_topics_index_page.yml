---
http_interactions:
- request:
    method: get
    uri: http://export.arxiv.org/api/query?search_query=ti:%22crispr%22%20OR%20abs:%22crispr%22%20OR%20ti:%22synthetic%20biology%22%20OR%20abs:%22synthetic%20biology%22&sortBy=submittedDate&sortOrder=descending&start=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.4.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 13 Jul 2021 21:40:04 GMT
      Server:
      - Apache
      Access-Control-Allow-Origin:
      - "*"
      Vary:
      - Accept-Encoding,User-Agent
      Content-Length:
      - '8528'
      Content-Type:
      - application/atom+xml; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 13 Jul 2021 21:40:04 GMT
- request:
    method: get
    uri: http://export.arxiv.org/api/query?search_query=ti:%22crispr%22%20OR%20abs:%22crispr%22%20OR%20ti:%22synthetic%20biology%22%20OR%20abs:%22synthetic%20biology%22&sortBy=submittedDate&sortOrder=descending&start=10
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.4.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 13 Jul 2021 21:40:05 GMT
      Server:
      - Apache
      Access-Control-Allow-Origin:
      - "*"
      Vary:
      - Accept-Encoding,User-Agent
      Content-Length:
      - '7075'
      Content-Type:
      - application/atom+xml; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 13 Jul 2021 21:40:05 GMT
recorded_with: VCR 6.0.0
